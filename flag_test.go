package z80

import "testing"

func TestFlagOp_ApplyOn(t *testing.T) {
	t.Parallel()
	for _, c := range []struct {
		op  FlagOp
		v   []uint8
		exp []uint8
	}{
		{FlagOp{0x00, 0x00}, []uint8{0x01, 0x00}, []uint8{0x01, 0x00}},
		{FlagOp{0x01, 0x00}, []uint8{0x01, 0x00}, []uint8{0x00, 0x00}},
		{FlagOp{0x01, 0x01}, []uint8{0x01, 0x00}, []uint8{0x01, 0x01}},
		// undefined behavior
		{FlagOp{0x00, 0x01}, []uint8{0x01, 0x00}, []uint8{0x01, 0x01}},

		{FlagOp{0x00, 0x00}, []uint8{0x10, 0x00}, []uint8{0x10, 0x00}},
		{FlagOp{0x10, 0x00}, []uint8{0x10, 0x00}, []uint8{0x00, 0x00}},
		{FlagOp{0x10, 0x10}, []uint8{0x10, 0x00}, []uint8{0x10, 0x10}},
		// undefined behavior
		{FlagOp{0x00, 0x10}, []uint8{0x10, 0x00}, []uint8{0x10, 0x10}},

		{FlagOp{0x00, 0x00}, []uint8{0x11}, []uint8{0x11}},
		{
			FlagOp{0x11, 0x00},
			[]uint8{0x11, 0x10, 0x01, 0x00},
			[]uint8{0x00, 0x00, 0x00, 0x00},
		},
		{
			FlagOp{0x11, 0x11},
			[]uint8{0x11, 0x10, 0x01, 0x00},
			[]uint8{0x11, 0x11, 0x11, 0x11},
		},
		// undefined behavior
		{
			FlagOp{0x00, 0x11},
			[]uint8{0x11, 0x10, 0x01, 0x00},
			[]uint8{0x11, 0x11, 0x11, 0x11},
		},
	} {
		for i, v := range c.v {
			c.op.ApplyOn(&v)
			if v != c.exp[i] {
				t.Fatalf("failed %#v.ApplyOn(0x%02x): expect=0x%02x actual=0x%02x", c.op, c.v[i], c.exp[i], v)
			}
		}
	}
}
